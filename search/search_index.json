{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Max's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/go-setup/","title":"Setting up a dev container for Go","text":"<ul> <li>Primary author: Max Yu</li> <li>Reviewer: Ayush Pai</li> </ul>"},{"location":"tutorials/go-setup/#prerequisites","title":"Prerequisites","text":"<p>Before starting, ensure you have the following installed on your system:</p> <ul> <li>Git</li> <li>Docker</li> <li>Visual Studio Code (VS Code)</li> <li>Dev Containers extension for VS Code</li> </ul>"},{"location":"tutorials/go-setup/#step-by-step-instructions","title":"Step-by-Step Instructions","text":""},{"location":"tutorials/go-setup/#step-1-create-a-new-project-directory","title":"Step 1: Create a New Project Directory","text":"<ol> <li>Open your terminal and create a new directory for your Go project:    <pre><code>mkdir go-project\ncd go-project\n</code></pre></li> <li>Initialize a new Git repository locally:    <pre><code>git init\necho \"# Go Project\" &gt; README.md\ngit add README.md\ngit commit -m \"Initial commit with README\"\n</code></pre></li> </ol>"},{"location":"tutorials/go-setup/#step-2-create-a-remote-repository-and-link-it","title":"Step 2: Create a Remote Repository and Link It","text":"<ol> <li>Go to GitHub and create a new repository named <code>go-project</code>.</li> <li>Do not initialize the repository with a README, .gitignore, or license.</li> <li>Back in your terminal, add the remote repository to your local Git repository:    <pre><code>git remote add origin https://github.com/YourGitHubUsername/go-project.git\n</code></pre></li> <li>Push your initial commit to GitHub:    <pre><code>git branch -M main\ngit push -u origin main\n</code></pre></li> </ol>"},{"location":"tutorials/go-setup/#step-3-configure-the-development-container-in-vs-code","title":"Step 3: Configure the Development Container in VS Code","text":"<ol> <li>Open the project in VS Code by selecting File &gt; Open Folder and navigating to your <code>go-project</code> directory.</li> <li>In the Explorer pane, right-click and select New Folder, then name it <code>.devcontainer</code>.</li> <li>Inside the <code>.devcontainer</code> folder, create a new file named <code>devcontainer.json</code> and add the following content:    <pre><code>{\n  \"name\": \"Go Dev Container\",\n  \"image\": \"mcr.microsoft.com/vscode/devcontainers/go:1\",\n  \"customizations\": {\n    \"vscode\": {\n      \"extensions\": [\"golang.go\"]\n    }\n  }\n}\n</code></pre></li> <li>Use the integrated terminal (Ctrl+` or View &gt; Terminal) to add and commit the new files:    <pre><code>git add .devcontainer\ngit commit -m \"Add dev container configuration\"\n</code></pre></li> </ol> <p>Important</p> <p>In step 3 inside the image url, the \"1\" in <code>go:1</code> refers to a specific version of go - Ayush Pai.</p>"},{"location":"tutorials/go-setup/#explanation-of-the-devcontainerjson-file","title":"Explanation of the <code>devcontainer.json</code> file","text":"<ul> <li><code>name</code>: Specifies the name of the dev container, making it easy to identify in VS Code.</li> <li><code>image</code>: Defines the base Docker image used for the development environment. Here, it specifies a Go development image provided by Microsoft.</li> <li><code>customizations</code>: Customizes VS Code settings for the container. The example enables the Go extension for better Go language support.</li> </ul>"},{"location":"tutorials/go-setup/#step-4-open-the-dev-container-in-vs-code","title":"Step 4: Open the Dev Container in VS Code","text":"<ol> <li>From the Command Palette:</li> <li>Windows/Linux: Press <code>Ctrl+Shift+P</code>.</li> <li>Mac: Press <code>Cmd+Shift+P</code>.</li> <li>Search for and select Dev Containers: Reopen in Container.</li> <li>Wait for the container to build and initialize.</li> </ol>"},{"location":"tutorials/go-setup/#step-5-initialize-a-go-project-in-the-dev-container","title":"Step 5: Initialize a Go Project in the Dev Container","text":"<ol> <li> <p>Inside the integrated terminal in VS Code, verify your Go installation by checking the version:    <pre><code>go version\n</code></pre>    Ensure the displayed version is recent and supported.</p> </li> <li> <p>Initialize a new Go module:    <pre><code>go mod init github.com/YourGitHubUsername/go-project\n</code></pre>    Replace <code>github.com/YourGitHubUsername/go-project</code> with the actual URL of your GitHub repository. This ensures your module path matches its hosting location and avoids potential conflicts when sharing or publishing your code.</p> </li> <li> <p>Create a new file named <code>main.go</code> with the following content:    <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello COMP423\")\n}\n</code></pre></p> </li> <li>Add and commit the Go project files:    <pre><code>git add main.go go.mod\ngit commit -m \"Add basic Go project with Hello COMP423\"\n</code></pre></li> </ol> <p>Note</p> <p>You can also just use <code>git add .</code> instead of <code>git add main.go go.mod</code> - Ayush Pai.</p>"},{"location":"tutorials/go-setup/#step-6-compile-and-run-the-project-in-the-dev-container","title":"Step 6: Compile and Run the Project in the Dev Container","text":"<ol> <li> <p>Compile the project:    <pre><code>go build -o hello-comp423\n</code></pre>    This generates a binary file named <code>hello-comp423</code>. The <code>go build</code> command is similar to the <code>gcc</code> command in C programming (as used in COMP211). Like <code>gcc</code>, <code>go build</code> compiles your source code into a machine-readable binary file that can be executed without needing the Go runtime environment to interpret the code.</p> </li> <li> <p>Run the compiled binary directly:    <pre><code>./hello-comp423\n</code></pre>    You should see:    <pre><code>Hello COMP423\n</code></pre></p> </li> <li> <p>Alternatively, run the project without building:    <pre><code>go run main.go\n</code></pre>    The <code>go run</code> command compiles and executes the code in a single step, but it does not produce a binary file. This is useful for quick testing but is less efficient if you plan to run the program multiple times.</p> </li> </ol> <p>Key Difference: <code>go build</code> creates a reusable binary file, whereas <code>go run</code> executes the program directly without saving a binary.</p>"},{"location":"tutorials/go-setup/#step-7-push-updates-to-github-from-vs-code","title":"Step 7: Push Updates to GitHub from VS Code","text":"<ol> <li>Push the latest changes to GitHub using the integrated terminal:    <pre><code>git push\n</code></pre></li> </ol>"},{"location":"tutorials/go-setup/#final-steps","title":"Final Steps","text":"<p>Congratulations! Your Go project is now set up with a dev container and linked to a GitHub repository.</p> <p>For additional help, consult the official Go documentation.</p>"}]}